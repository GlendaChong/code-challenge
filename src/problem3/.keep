interface WalletBalance {
    currency: string;
    amount: number;
  }
  interface FormattedWalletBalance {
    currency: string;
    amount: number;
    formatted: string;
  }
  
  class Datasource {
    // TODO: Implement datasource class
    url: string;

    constructor(url: string) {
      this.url = url;
    }

    async getPrices() {
        try {
            const response = await fetch(this.url); 
            const data = await response.json(); 
            return data; 
        } catch (err) {
            console.error(err);
        }
    }
  }
  
  interface Props extends BoxProps {
  
  }
  const WalletPage: React.FC<Props> = (props: Props) => {
    const { children, ...rest } = props;
    const balances = useWalletBalances();
    const [prices, setPrices] = useState({});
  
    useEffect(() => {
      const datasource = new Datasource("https://interview.switcheo.com/prices.json");
      datasource.getPrices().then(prices => {
        setPrices(prices);
      }).catch(error => {
        console.error(error);
      });
    }, [prices]);
  
    const getPriority = (blockchain: any): number => {
        switch (blockchain) {
            case 'Osmosis':
                return 100
            case 'Ethereum':
                return 50
            case 'Arbitrum':
                return 30
            case 'Zilliqa':
                return 20
            case 'Neo':
                return 20
            default:
                return -99
        }
    }

    const sortedBalances = useMemo(() => {
        return balances
            .filter((balance: WalletBalance) => {
                const balancePriority = getPriority(balance.currency);
                if (balancePriority > -99) {
                if (balance.amount <= 0) {
                    return true;
                }
                }
                return false
            }).sort((lhs: WalletBalance, rhs: WalletBalance) => {
                    const leftPriority = getPriority(lhs.currency);
                    const rightPriority = getPriority(rhs.currency);
                    return rightPriority - leftPriority;
            }).map((balance: WalletBalance) => ({
                ...balance, 
                formatted: balance.amount.toFixed()
            }));
    }, [balances]);
  

    const rows = sortedBalances.map((balance: WalletBalance, index: number) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow 
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      )
    })
  
    return (
      <div {...rest}>
        {rows}
      </div>
    )
  }

  /*
    1. Should be console.error(error) instead of console.err(error)
    2. lhsPriority is not defined in the filter function, lhsPriority should be balancePriority in the filter function
    4. balance, lhs, rhs does not have a blockchain property, because they are all of type WalletBalance
    5. useEffect dependency array is empty, so it will only run once and won't be triggered again
    6. formattedBalances can be removed and done together in sortedBalances
  */